/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7/samples
 */
plugins {
    id 'java'
    id 'antlr'
    id 'jacoco'
    id 'checkstyle'
}

group 'lcmc'
version '1.0'

repositories {
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 *
 * Thanks to Davide Savazzi at https://github.com/svzdvd/antlr4-gradle-example/blob/master/build.gradle
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.9'
    compile 'org.antlr:antlr4:4.8'
    testImplementation 'junit:junit:4.13'
    testCompile 'junit:junit:4.13'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]

    doLast {
        println "Copying generated grammar lexer/parser files to main directory"
        println "From ${buildDir}/generated-src/antlr/main/ to generated-src/main/"
        copy {
            from "${buildDir}/generated-src/antlr/main"
            into "${buildDir}/generated-src/main/java/fool"
        }
        // file("${buildDir}/generated-src/antlr/main").deleteDir()
    }
}

// Checkstyle configuration.
def configDir = "${project.rootDir}/config"

checkstyle {
    toolVersion '8.37'
    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("$configDir/checkstyle/suppressions.xml").absolutePath
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

test {
    useJUnit()
    maxHeapSize = '1G'
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.33
            }
        }
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

clean.doLast {
    file('generated-src').deleteDir()
}
